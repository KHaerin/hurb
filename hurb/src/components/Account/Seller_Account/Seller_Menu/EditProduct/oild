import {Container, Row, Col, Modal, Card, Button} from 'react-bootstrap';
import React, { useState, useEffect } from "react";
import BottomDrop from '../addproduct/bottomDrop';
import TopDrop from '../addproduct/topDrop';
import ColorsDrop from './dropColor';
import axios from 'axios';


function EditProduct({ showPay, handleClosePay, product }) {

    const[productName, setProductName] = useState('');

    const[product_name, setProduct_Name] = useState('');
    const[product_category, setProductCategory] = useState('');
    const[product_sub_category, setProductSubCategory] = useState('');
    const[product_details, setProductDetails] = useState('');
    const[product_price, setProductPrice] = useState('');
    const[product_img, setProductImg] = useState(null);
    const[sizes, setSizes] = useState(['XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL']);
    const [variants, setVariants] = useState([]);
    const [selectedProduct, setSelectedProduct] = useState([]);

    useEffect(() => {
        if(product){
            fetchSizes(product);
        }      
    }, [product]);

    const [products, setProduct] = useState([]);

    const fetchSizes = async(product) => {
        try {
            const response = await axios.get(`http://localhost/hurb/selectSizes.php?product_id=${product}`);
            setProduct(response.data);

            if(response){
                const stockFetch = response.data[0];
                const categFetch = stockFetch.product_category;
                const nameFetch = stockFetch.product_name;
                const subCategFetch = stockFetch.product_sub_category;
                const detailsFetch = stockFetch.product_details;
                const price = stockFetch.product_price;

                setProductName(nameFetch);
                setProduct_Name((nameFetch));
                setProductCategory(categFetch);
                setProductSubCategory(subCategFetch);
                setProductDetails(detailsFetch);
                setProductPrice(price);
            } 
        } catch (error) {
            console.error('Error fetching sizes: ', error);
        }
    }

    const card = {
        width: '400px'
    }

    const uniqueColors = {};
    const colorData = {};

    
    const filteredProducts = products.filter(product => {
        if (!uniqueColors[product.color_id]) {
           
            colorData[product.color_id] = { sizes: [product.size], quantities: [product.quantity] };
            uniqueColors[product.color_id] = true;
            return true;
        } else {
          
            colorData[product.color_id].sizes.push(product.size);
            colorData[product.color_id].quantities.push(product.quantity);
        }
        return false;
    });

    useEffect(() => {
        console.log('colordata: ', colorData);
        console.log('variants: ',variants);
        console.log('selected: ', selectedProduct);
    })

    const getProductImage = (product) => {
        const image = product.images.find(image => image.color_id === product.color_id);
        if (image) {
            return `http://localhost/hurb/${image.product_img}`;
        } else {
            return 'holder.js/100px180'; // or return '';
        }
    };

    const addVariant = () => {
        setVariants([...variants, {
            color: '',
            sizes: [],
            quantities: {},
            product_img: ''
        }]);
    };

    const deleteVariant = (index) => {
        const updatedVariants = [...variants];
        updatedVariants.splice(index, 1);
        setVariants(updatedVariants);
    };

    const handleColorChange = (color, index) => {
        const updatedVariants = [...variants];
        updatedVariants[index].color = color;
        setVariants(updatedVariants);
    };

    // const handleSizeChange = (size, index) => {
    //     const updatedSelectedProduct = [...selectedProduct];
    //     const updatedProduct = { ...updatedSelectedProduct[index] };
    
    //     if (!updatedProduct.variants) {
    //         updatedProduct.variants = [];
    //     }
    
    //     const variantIndex = updatedProduct.variants.findIndex(variant => variant.color === updatedProduct.color);
    
    //     if (variantIndex !== -1) {
    //         const updatedVariant = { ...updatedProduct.variants[variantIndex] };
    //         const sizeIndex = updatedVariant.sizes.indexOf(size);
    
    //         if (sizeIndex !== -1) {
    //             updatedVariant.sizes.splice(sizeIndex, 1);
    //             updatedVariant.quantities[size] = undefined;
    //         } else {
    //             updatedVariant.sizes.push(size);
    //         }
    
    //         updatedProduct.variants[variantIndex] = updatedVariant;
    //     } else {
    //         const newVariant = {
    //             color: updatedProduct.color,
    //             sizes: [size],
    //             quantities: { [size]: undefined }
    //         };
    
    //         updatedProduct.variants.push(newVariant);
    //     }
    
    //     updatedSelectedProduct[index] = updatedProduct;
    //     setSelectedProduct(updatedSelectedProduct);
    // };

    // const handleQuantityChange = (size, quantity, index) => {
    //     const updatedVariants = [...variants];
    //     updatedVariants[index].quantities[size] = quantity;
    //     setVariants(updatedVariants);
    // };

    const [colorExist, setColorExist] = useState('');

    const handleExistingProductSizeChange = (size, index, color) => {
        const updatedSelectedProduct = [...selectedProduct];
        const updatedProduct = { ...updatedSelectedProduct[index] };
        setColorExist(color);
    
        if (color !== colorExist) {
            setColorExist(color); // Update colorExist if color is different
            console.log('haha: ', color);
        }
    
        if (!updatedProduct.variants) {
            updatedProduct.variants = [];
        }
    
        const variantIndex = updatedProduct.variants.findIndex(variant => variant.color === updatedProduct.color);
    
        if (variantIndex !== -1) {
            const updatedVariant = { ...updatedProduct.variants[variantIndex] };
            const sizeIndex = updatedVariant.sizes.indexOf(size);
    
            if (sizeIndex !== -1) {
                updatedVariant.sizes.splice(sizeIndex, 1);
                updatedVariant.quantities[size] = undefined;
            } else {
                updatedVariant.sizes.push(size);
            }
    
            updatedProduct.variants[variantIndex] = updatedVariant;
        } else {
            const newVariant = {
                color: color,
                sizes: [size],
                quantities: { [size]: undefined }
            };
    
            updatedProduct.variants.push(newVariant);
        }
    
        updatedSelectedProduct[index] = updatedProduct;
        setSelectedProduct(updatedSelectedProduct);
    };
    
    const handleVariantSizeChange = (size, index) => {
        const updatedVariants = [...variants];
        const updatedVariant = { ...updatedVariants[index] };
    
        const sizeIndex = updatedVariant.sizes.indexOf(size);
    
        if (sizeIndex !== -1) {
            updatedVariant.sizes.splice(sizeIndex, 1);
            updatedVariant.quantities[size] = undefined;
        } else {
            updatedVariant.sizes.push(size);
        }
    
        updatedVariants[index] = updatedVariant;
        setVariants(updatedVariants);
    };
    
    const handleExistingProductQuantityChange = (size, quantity, index) => {
        const updatedSelectedProduct = [...selectedProduct];
        const updatedProduct = { ...updatedSelectedProduct[index] };
    
        if (!updatedProduct.variants) {
            updatedProduct.variants = [];
        }
    
        const variantIndex = updatedProduct.variants.findIndex(variant => variant.color === updatedProduct.color);
    
        if (variantIndex !== -1) {
            const updatedVariant = { ...updatedProduct.variants[variantIndex] };
            updatedVariant.quantities[size] = quantity;
            updatedProduct.variants[variantIndex] = updatedVariant;
        }
    
        updatedSelectedProduct[index] = updatedProduct;
        setSelectedProduct(updatedSelectedProduct);
    };
    
    const handleVariantQuantityChange = (size, quantity, index) => {
        const updatedVariants = [...variants];
        updatedVariants[index].quantities[size] = quantity;
        setVariants(updatedVariants);
    };

    const image_style = {
        width: "200px",
        height: "200px"
    }


    const [fullscreen, setFullscreen] = useState(true);
    return (
        <>
            <Modal fullscreen={fullscreen} show={showPay} onHide={handleClosePay}>
                <Modal.Header closeButton>
                    <Modal.Title>{productName}</Modal.Title>
                </Modal.Header>
                <Modal.Body>
                    <Container className='mb-5'>
                        <Row>
                            <Col>
                                <h1>Product Details</h1>
                            </Col>
                        </Row>
                        <Row>
                            <Col>  
                            <div className="form-floating mb-3">
                                <input type="text" className="form-control form-control-sm" value={product_name} onChange={(e) => setProduct_Name(e.target.value)} name="product_name" id="floatingInput" placeholder="name@example.com"/>
                                <label htmlFor="floatingInput">Product Name</label>
                            </div>
                            </Col>
                        </Row>
                        <Row>
                            <Col>
                                <div className="input-group mb-3">
                                    <select id="inputGroupSelect02" className="form-select" value={product_category} name="product_category" onChange={(e) => setProductCategory(e.target.value)} >
                                        <option value="DEFAULT">Select a category---</option>
                                        <option value="Top">Top</option>
                                        <option value="Bottom">Bottom</option>
                                    </select>
                                </div>
                            </Col>
                        </Row>
                        <Row>
                            <Col>
                            <div className="input-group mb-3">
                                <select id="inputGroupSelect02" className="form-select" value={product_sub_category} onChange={(e) => setProductSubCategory(e.target.value)} name="product_sub_category"  >
                                    <option value="DEFAULT">Select a clothing category---</option>
                                    {product_category === "Top" && <TopDrop onSelectSubCategory={setProductSubCategory} />}
                                    {product_category === "Bottom" && <BottomDrop onSelectSubCategory={setProductSubCategory} />}
                                </select>
                            </div>
                            </Col>
                        </Row>
                        <Row>
                            <Col>
                                <div className="form-floating mb-3">
                                    <textarea className="form-control" name="product_details" value={product_details} onChange={(e) => setProductDetails(e.target.value)} placeholder="Leave a comment here" id="floatingTextarea"></textarea>
                                    <label htmlFor="floatingTextarea">Product Details</label>
                                </div>
                            </Col>
                        </Row>
                        <Row>
                            <Col>
                                <div className="form-floating mb-3">
                                    <input type="text" className="form-control form-control-sm" value={product_price} onChange={(e) => setProductPrice(e.target.value)} name="product_price" id="floatingInput" placeholder="name@example.com"/>
                                    <label htmlFor="floatingInput">Price</label>
                                </div>
                            </Col>
                        </Row>
                    </Container>
                    {/* EXISTING PRODUCT VARIANTS */}
                    <Container>
                        <section id="existing-product-variant">
                        <Row>
                            {filteredProducts.map((product, index) => (
                                <Col lg={4} className='mb-5' key={index}>                              
                                    <Card style={card}>
                                        <div className='d-flex justify-content-center align-items-center p-4'>
                                            <Card.Img variant="top" style={image_style} src={getProductImage(product)} />
                                        </div>
                                        <Card.Body>
                                            <Card.Title>{product.color}</Card.Title>
                                            <div className="input-group mb-3">
                                                <select
                                                    className="form-select"
                                                    value={product.color}
                                                    onChange={(e) => handleColorChange(e.target.value, index)}>
                                                    <option value="">Select a color</option>
                                                    <ColorsDrop 
                                                        onSelectColors={color => handleColorChange(color, index)} 
                                                        selectedColors={product.color} 
                                                        allSelectedColors={filteredProducts.map(section => section.color)} 
                                                    />
                                                </select>
                                            </div>
                                            {sizes.map((size, sizeindex) => (
                                                <div className="row d-flex align-items-center" key={`${sizeindex}-${index}`}>
                                                    <div className="col-lg-2">
                                                        <div className="form-check d-flex gap-2">
                                                            <input
                                                                type="checkbox"
                                                                className="form-check-input"
                                                                onChange={() => handleExistingProductSizeChange(size, index, product.color)}
                                                                checked={colorData[product.color_id].sizes.includes(size)}
                                                            />
                                                            <label className="form-check-label">{size}</label>
                                                        </div>
                                                    </div>
                                                    {colorData[product.color_id].sizes.includes(size) && (
                                                    <div className="col-auto">
                                                        <div className="form-floating mb-3">
                                                         <input
                                                                    type="number"
                                                                    className="form-control form-control-sm"
                                                                    value={colorData[product.color_id].quantities[sizeindex] || ''}
                                                                    onChange={(e) => handleExistingProductQuantityChange(size, e.target.value, index)}
                                                                    placeholder="Quantity"
                                                                />
                                                            <label>Stock</label>
                                                        </div>
                                                    </div>
                                                )}
                                                </div>
                                            ))}
                                            <Card.Text>
                                            Sizes: {colorData[product.color_id].sizes.map((size, sizeIndex) => (
                                                        <span key={sizeIndex}>{size}</span>
                                                    ))}<br />
                                                Stock: {colorData[product.color_id].quantities.join(', ')}
                                            </Card.Text>
                                            {/* <Button variant="primary">Go somewhere</Button> */}
                                        </Card.Body>
                                    </Card>                                    
                                </Col>
                            ))}
                        </Row>
                        </section>
                         
                        {/* END OF EXISTING PRODUCT VARIANT */}

                        {/* ADD NEW VARIANT */}
                        <Row>
                            {variants.map((variant, index) => (
                                <Col lg={4} className='mb-5' key={index}>
                                    <Card>
                                        <Card.Body>
                                            <div className="input-group mb-3">
                                                <select
                                                    className="form-select"
                                                    value={variant.color}
                                                    onChange={(e) => handleColorChange(e.target.value, index)}>
                                                    <option value="">Select a color</option>
                                                    <ColorsDrop 
                                                        onSelectColors={color => handleColorChange(color, index)} 
                                                        selectedColors={variant.color} 
                                                        allSelectedColors={[...new Set([...filteredProducts.map(section => section.color), ...variants.map(section => section.color)])]}
                                                    />
                                                </select>
                                            </div>
                                            {sizes.map((size, sizeindex) => (
                                                <div className="row d-flex align-items-center" key={`${sizeindex}-${index}`}>
                                                    <div className="col-lg-2">
                                                        <div className="form-check d-flex gap-2">
                                                            <input
                                                                type="checkbox"
                                                                className="form-check-input"
                                                                onChange={() => handleVariantSizeChange(size, index)}
                                                                checked={!!variant.sizes.includes(size)}
                                                            />
                                                            <label className="form-check-label">{size}</label>
                                                        </div>
                                                    </div>
                                                    {variant.sizes.includes(size) && (
                                                        <div className="col-auto">
                                                            <div className="form-floating mb-3">
                                                                <input
                                                                    type="number"
                                                                    className="form-control form-control-sm"
                                                                    value={variant.quantities[size] || ''}
                                                                    onChange={(e) => handleVariantQuantityChange(size, e.target.value, index)}
                                                                    placeholder="Quantity"
                                                                />
                                                                <label>Stock</label>
                                                            </div>
                                                        </div>
                                                    )}
                                                </div>
                                            ))}
                                            {/* Delete button for variants */}
                                            <Button variant="danger" onClick={() => deleteVariant(index)}>Delete Variant</Button>
                                        </Card.Body>
                                    </Card>
                                </Col>
                            ))}  
                        </Row> 
                        <Row>
                            <Col className='d-flex justify-content-end align-items-center'>
                                <Button variant="primary" onClick={addVariant}>+ Add Variant</Button>
                            </Col>
                        </Row>    
                    </Container>  
                            
                </Modal.Body>

                <Modal.Footer>
                    <Button variant="secondary" onClick={handleClosePay}>Close</Button>
                    <Button variant="primary">Save changes</Button>
                </Modal.Footer>
            </Modal>
        </>
    );
}
export default EditProduct;